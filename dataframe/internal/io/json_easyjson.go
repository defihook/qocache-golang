// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package io

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson42239ddeDecodeGithubComTobguGoQcacheDataframeInternalIo(in *jlexer.Lexer, out *JsonString) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(JsonString, 0, 4)
			} else {
				*out = JsonString{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 string
			v1 = string(in.String())
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson42239ddeEncodeGithubComTobguGoQcacheDataframeInternalIo(out *jwriter.Writer, in JsonString) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			out.String(string(v3))
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v JsonString) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson42239ddeEncodeGithubComTobguGoQcacheDataframeInternalIo(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JsonString) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson42239ddeEncodeGithubComTobguGoQcacheDataframeInternalIo(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *JsonString) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson42239ddeDecodeGithubComTobguGoQcacheDataframeInternalIo(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JsonString) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson42239ddeDecodeGithubComTobguGoQcacheDataframeInternalIo(l, v)
}
func easyjson42239ddeDecodeGithubComTobguGoQcacheDataframeInternalIo1(in *jlexer.Lexer, out *JsonInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(JsonInt, 0, 8)
			} else {
				*out = JsonInt{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 int
			v4 = int(in.Int())
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson42239ddeEncodeGithubComTobguGoQcacheDataframeInternalIo1(out *jwriter.Writer, in JsonInt) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			out.Int(int(v6))
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v JsonInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson42239ddeEncodeGithubComTobguGoQcacheDataframeInternalIo1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JsonInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson42239ddeEncodeGithubComTobguGoQcacheDataframeInternalIo1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *JsonInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson42239ddeDecodeGithubComTobguGoQcacheDataframeInternalIo1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JsonInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson42239ddeDecodeGithubComTobguGoQcacheDataframeInternalIo1(l, v)
}
func easyjson42239ddeDecodeGithubComTobguGoQcacheDataframeInternalIo2(in *jlexer.Lexer, out *JsonFloat64) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(JsonFloat64, 0, 8)
			} else {
				*out = JsonFloat64{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v7 float64
			v7 = float64(in.Float64())
			*out = append(*out, v7)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson42239ddeEncodeGithubComTobguGoQcacheDataframeInternalIo2(out *jwriter.Writer, in JsonFloat64) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v8, v9 := range in {
			if v8 > 0 {
				out.RawByte(',')
			}
			out.Float64(float64(v9))
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v JsonFloat64) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson42239ddeEncodeGithubComTobguGoQcacheDataframeInternalIo2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JsonFloat64) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson42239ddeEncodeGithubComTobguGoQcacheDataframeInternalIo2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *JsonFloat64) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson42239ddeDecodeGithubComTobguGoQcacheDataframeInternalIo2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JsonFloat64) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson42239ddeDecodeGithubComTobguGoQcacheDataframeInternalIo2(l, v)
}
func easyjson42239ddeDecodeGithubComTobguGoQcacheDataframeInternalIo3(in *jlexer.Lexer, out *JsonBool) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(JsonBool, 0, 64)
			} else {
				*out = JsonBool{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v10 bool
			v10 = bool(in.Bool())
			*out = append(*out, v10)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson42239ddeEncodeGithubComTobguGoQcacheDataframeInternalIo3(out *jwriter.Writer, in JsonBool) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v11, v12 := range in {
			if v11 > 0 {
				out.RawByte(',')
			}
			out.Bool(bool(v12))
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v JsonBool) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson42239ddeEncodeGithubComTobguGoQcacheDataframeInternalIo3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JsonBool) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson42239ddeEncodeGithubComTobguGoQcacheDataframeInternalIo3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *JsonBool) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson42239ddeDecodeGithubComTobguGoQcacheDataframeInternalIo3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JsonBool) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson42239ddeDecodeGithubComTobguGoQcacheDataframeInternalIo3(l, v)
}
